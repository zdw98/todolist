{"version":3,"sources":["model/storage.js","component/Todolist.js","App.js","serviceWorker.js","index.js"],"names":["storage","set","key","value","localStorage","setItem","JSON","stringify","get","parse","getItem","Todolist","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","addData","temp","title","refs","checked","list","state","push","setState","addDataByEnter","e","keyCode","removeData","index","splice","changeChecked","_this2","react_default","a","createElement","className","ref","onKeyUp","onClick","map","type","onChange","bind","Component","App","Todolist_Todolist","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.604a2005.chunk.js","sourcesContent":["const storage = {\r\n    set(key, value) {\r\n        return localStorage.setItem(key, JSON.stringify(value))\r\n    },\r\n    get(key) {\r\n        return JSON.parse(localStorage.getItem(key))\r\n    }\r\n}\r\n\r\nexport default storage\r\n","import React, {Component} from 'react'\r\nimport '../assets/css/todolist.css'\r\n// 引用storage模块\r\nimport storage from '../model/storage'\r\n\r\nexport default class Todolist extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            list: []\r\n        }\r\n    }\r\n\r\n    addData = () => {\r\n        const temp = {\r\n            title: this.refs['title'].value,\r\n            checked: false\r\n        }\r\n        /*\r\n         * 不可以直接 ：\r\n         * this.setState({\r\n            list: this.state.list.push(temp)\r\n            })\r\n         * 因为this.state.list.push(temp)的返回值是这个元素加入到数组后的索引！\r\n         * 也不能直接操作this.state.list，如果要改变state里的list的值\r\n         * 要先获取原来的list，\r\n         * 赋值给新的字段，\r\n         * 再通过this.setState({})来修改\r\n         */\r\n        const list = this.state.list\r\n        list.push(temp)\r\n        this.setState({\r\n            list: list\r\n        })\r\n        // 表单置空\r\n        this.refs['title'].value = ''\r\n        // 使用storage缓存数据，只能存字符串\r\n        storage.set('todolist', list)\r\n    }\r\n    // 一按回车键盘就增加\r\n    addDataByEnter = e => {\r\n        if (e.keyCode === 13) {\r\n            const temp = {\r\n                title: this.refs['title'].value,\r\n                checked: false\r\n            }\r\n            const list = this.state.list\r\n            list.push(temp)\r\n            this.setState({\r\n                list: list\r\n            })\r\n            // 表单置空\r\n            this.refs['title'].value = ''\r\n            // 使用storage缓存数据，只能存字符串\r\n            storage.set('todolist', list)\r\n        }\r\n    }\r\n    removeData = index => {\r\n        const list = this.state.list\r\n        list.splice(index, 1)\r\n        this.setState({\r\n            list: list\r\n        })\r\n        // 使用storage缓存数据，只能存字符串\r\n        storage.set('todolist', list)\r\n    }\r\n    changeChecked = index => {\r\n        const list = this.state.list\r\n        list[index].checked = !list[index].checked\r\n        this.setState({\r\n            list: list\r\n        })\r\n        // 使用storage缓存数据，只能存字符串\r\n        storage.set('todolist', list)\r\n    }\r\n    // 一刷新就加载的生命周期函数\r\n    componentDidMount() {\r\n        // 获取数据，字符串转为JSON\r\n        const list = storage.get('todolist')\r\n        if (list) {\r\n            this.setState({\r\n                list: list\r\n            })\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"todolist\">\r\n                <h3>输入代办事项</h3>\r\n                <div className=\"row1\">\r\n                    <input ref=\"title\" onKeyUp={this.addDataByEnter}/>\r\n                    <button onClick={this.addData}>增加+</button>\r\n                </div>\r\n                <h3>您的代办事项</h3>\r\n                <ul>\r\n                    {\r\n                        // 在map内部用到this要注意指向，所以使用箭头函数\r\n                        this.state.list.map((value, key) => {\r\n                            if (!value.checked) {\r\n                                // return里的代码如果想换行，用的是”括号()“来包裹\r\n                                return (\r\n                                    <li key={key}>\r\n                                        <input type=\"checkbox\" checked={value.checked} onChange={this.changeChecked.bind(this, key)}/>\r\n                                        {value.title}\r\n                                        <button onClick={this.removeData.bind(this, key)}>删除-</button>\r\n                                    </li>\r\n                                )\r\n                            }\r\n                            // map里没直接return会有warning\r\n                            return ''\r\n                        })\r\n                    }\r\n                </ul>\r\n                <h3>您的已完成事项</h3>\r\n                <ul>\r\n                    {\r\n                        // 在map内部用到this要注意指向，所以使用箭头函数\r\n                        this.state.list.map((value, key) => {\r\n                            if (value.checked) {\r\n                                // return里的代码如果想换行，用的是“括号()”来包裹\r\n                                return (\r\n                                    <li key={key}>\r\n                                        <input type=\"checkbox\" checked={value.checked} onChange={this.changeChecked.bind(this, key)}/>\r\n                                        {value.title}\r\n                                        <button onClick={this.removeData.bind(this, key)}>删除-</button>\r\n                                    </li>\r\n                                )\r\n                            }\r\n                            // map里没直接return会有warning\r\n                            return ''\r\n                        })\r\n                    }\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Todolist from './component/Todolist'\r\n\r\nfunction App() {\r\n  return (\r\n      <div>\r\n          <Todolist/>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './assets/css/index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}